// SublimeSocketAsset's testSuite


開始メッセージ/showStatusMessage: {
    "message": "test start\n\n"
}->resetResults: {

}->assertResult: {
    "id": "prepare for testing",
    "isempty": {},
    "description": "not empty",
    "debug": true
}



->ステータスバーにメッセージを表示/showStatusMessage: {
    "message": "testStatusMessage"
}->assertResult: {
    "id": "show statusMessage",
    "contains": {
        "showStatusMessage": {
            "output": "testStatusMessage"
        }
    },
    "description": "status message not match.",
    "debug": true
}


// ->ログ出力のテスト/showAtLog: {
//     "message": "testLogMessage"
// }->assertResult: {
//     "id": "log output test",
//     "contains": {
//         "showAtLog": {
//             "output": "testLogMessage"
//         }
//     },
//     "description": "not match."
// }


// ->フィルタ定義を行い、フィルタが生成されている/defineFilter: {
//     "name": "testFilter",
//     "patterns": [
//         {
//             "testPattern": {
//                 "selectors": [
//                     {
//                         "showStatusMessage": {
//                             "message": "hello!"
//                         }
//                     }
//                 ]
//             }
//         }
//     ]
// }->assertResult: {
//     "id": "should have filter-info",
//     "contains": {
//         "defineFilter": {
//             "defined": {
//                 "name": "testFilter",
//                 "patterns": [
//                     {
//                         "testPattern": {
//                             "selectors": [
//                                 {
//                                     "showStatusMessage": {
//                                         "message": "hello!"
//                                     }
//                                 }
//                             ]
//                         }
//                     }
//                 ]
//             }
//         }
//     },
//     "description": "not match."
// }


// ->filteringのテスト。フィルタをセット、改行指定ありで、結果に特定のデータが入る/defineFilter: {
//     "name": "filter_13/12/04 18:16:49",
//     "patterns": [
//         {
//             "(.*)dummyline": {
//                 "selectors": [
//                     {
//                         "showStatusMessage": {
//                             "message": "should be 1/2:groups[0] in filterSource[]/."
//                         }
//                     }
//                 ]
//             }
//         }
//     ],
//     "dotall": true
// }->filtering: {
//     "name": "filter_13/12/04 18:16:49",
//     "source": "1\\n2 dummyline",
//     "debug": false
// }->assertResult: {
//     "id": "filter hit values",
//     "contains": {
//         "runFiltering": [
//             {
//                 "filter_13/12/04 18:16:49": {
//                     "message": "should be 1/2:1\n2  in 1\n2 dummyline/."
//                 }
//             }
//         ]
//     },
//     "description": "not match."
// }


// ->filteringのテスト。フィルタをセット、改行指定無しで、結果に特定のデータが入らない、、はずだが、入ってる？それともテストツールがおかしい。/defineFilter: {
//     "name": "filter_13/12/04 23:58:49",
//     "patterns": [
//         {
//             "(.*)dummyline": {
//                 "selectors": [
//                     {
//                         "showStatusMessage": {
//                             "message": "should be 1/2:groups[0] in filterSource[]/."
//                         }
//                     }
//                 ]
//             }
//         }
//     ],
//     "dotall": false
// }->filtering: {
//     "name": "filter_13/12/04 23:58:49",
//     "source": "1\\n2 dummyline",
//     "debug": true
// }->assertResult: {
//     "id": "filter not hit values",
//     "notcontains": {
//         "runFiltering": [
//             {
//                 "13/12/04 23:58:49": {
//                     "message": "should be 1/2:1\n2  in 1\n2 dummyline/."
//                 }
//             }
//         ]
//     },
//     "description": "but match, should not match"
// }



->メッセージを特定クライアントに配信する。/inputIdentity: {
    "id": "testMonocastMessage"
}->monocastMessage: {
    "target": "testMonocastMessage",
    "message": "monocasting"
}->assertResult: {
    "id": "monocast message for specific client",
    "contains": {
        "monocastMessage": {
            "target": "testMonocastMessage",
            "message": "monocasting"
        }
    },
    "description": "faild to monocast."
}


->フォーマットを使用したmonocast/inputIdentity: {
    "id": "testMonocastMessageWithFormat"
}->monocastMessage: {
    "target": "testMonocastMessageWithFormat",
    "message": "monocasting",
    "format": "0:a1 b1 c1 d1",
    "0": "header",
    "a1": "the",
    "b1": "test",
    "c1": "is",
    "d1": "over"
}->assertResult: {
    "id": "monocast message with format",
    "contains": {
        "monocastMessage": {
            "target": "testMonocastMessageWithFormat",
            "message": "header:the test is over"
        }
    },
    "description": "faild to monocast with format."
}


->メッセージを全クライアントに配信する/inputIdentity: {
    "id": "testBroadcastMessage"
}->broadcastMessage: {
    "message": "broadcasting"
}->assertResult: {
    "id": "broadcast message for every client",
    "contains": {
        "broadcastMessage": {
            "sendedTo": [
                "testBroadcastMessage"
            ]
        }
    },
    "description": "faild to broadcast."
}

->reactorをリセットする/resetReactors:{

}->assertResult:{
    "id": "reset all reactors",
    "contains": {
        "resetReactors": {
            "deletedReactors": {}
        }
    },
    "description": "not match"
}



->reactorをセットする/resetReactors:{

}->setReactor: {
    "target": "testTarget",
    "event": "testEvent",
    "interval": 100,
    "selectors": [
        {
            "showStatusMessage": {
                "message": "eventEmit over."
            }
        }
    ]
}->assertResult: {
    "id": "reactor is set",
    "contains": {
        "setReactor": {
            "reactors": {
                "testEvent": {
                    "testTarget": {
                        "selectors": [
                            {
                                "showStatusMessage": {
                                    "message": "eventEmit over."
                                }
                            }
                        ],
                        "interval": 100
                    }
                }
            }
        }
    },
    "description": "not match"
}->resetReactors:{
    
}



->複数件の同名のevent-target reactorをセットして、増加しない/resetReactors:{

}->setReactor: {
    "target": "testTarget",
    "event": "testEvent",
    "interval": 100,
    "selectors": [
        {
            "showStatusMessage": {
                "message": "eventEmit over."
            }
        }
    ]
}->setReactor: {
    "target": "testTarget",
    "event": "testEvent",
    "interval": 100,
    "selectors": [
        {
            "showStatusMessage": {
                "message": "eventEmit over.2"
            }
        }
    ]
}->assertResult: {
    "id": "reactor is set",
    "contains": {
        "setReactor": {
            "reactors": {
                "testEvent": {
                    "testTarget": {
                        "selectors": [
                            {
                                "showStatusMessage": {
                                    "message": "eventEmit over."
                                }
                            }
                        ],
                        "interval": 100
                    }
                }
            }
        }
    },
    "description": "not match"
}->resetReactors:{
    
}


->複数件の同名のevent-別のtarget reactorをセットして、増加する/resetReactors:{

}->setReactor: {
    "target": "testTarget",
    "event": "testEvent",
    "interval": 100,
    "selectors": [
        {
            "showStatusMessage": {
                "message": "eventEmit over."
            }
        }
    ]
}->setReactor: {
    "target": "testTarget2",
    "event": "testEvent",
    "interval": 100,
    "selectors": [
        {
            "showStatusMessage": {
                "message": "eventEmit over.2"
            }
        }
    ]
}->assertResult: {
    "id": "reactor is set",
    "contains": {
        "setReactor": {
            "reactors": {
                "testEvent": {
                    "testTarget": {
                        "selectors": [
                            {
                                "showStatusMessage": {
                                    "message": "eventEmit over."
                                }
                            }
                        ],
                        "interval": 100
                    },
                    "testTarget2": {
                        "selectors": [
                            {
                                "showStatusMessage": {
                                    "message": "eventEmit over.2"
                                }
                            }
                        ],
                        "interval": 100
                    }
                }
            }
        }
    },
    "description": "not match"
}->resetReactors:{
    
}



->Clientのidentityをセットする/inputIdentity: {
    "id": "test"
}->assertResult: {
    "id": "inputIdentity done as test",
    "contains": {
        "inputIdentity": {
            "inputIdentity": "test"
        }
    },
    "description": "not match"
}


->設定の実行が実行されきったかどうか/runSetting: {
    "path": "SUBLIMESOCKET_PATH:doc/FilterSettingSamples/UnityFilter.txt"
}->assertResult: {
    "id": "setting done",
    "contains": {
        "runSetting": {
            "result": "done"
        }
    },
    "description": "not match"
}->resetReactors:{

}


// ->特定の名称のファイルのバッファを作成、内容を入力する。閉じられないので、後始末は自分でやる。/createBuffer: {
    
// }->assertResult: {
//     "id": "contains valid contents",
//     "contains": {
//         "createBuffer": {
//             "contents": "empty"
//         }
//     },
//     "description": "not contains."
// }



// ->存在するファイルを開く/openFile: {
//     "name": "SUBLIMESOCKET_PATH:resource/tests/testResources/sample.txt"
// }->assertResult: {
//     "id": "open exist file",
//     "contains": {
//         "openFile": {
//             "result": "file SUBLIMESOCKET_PATH:resource/tests/testResources/sample.txt is opened.",
//             "name": "SUBLIMESOCKET_PATH:resource/tests/testResources/sample.txt"
//         }
//     },
//     "description": "not contains."
// }



// ->存在しないファイルを開き、scratchが作成される(けどそれを認識する方法は無い)/openFile: {
//     "name": "SUBLIMESOCKET_PATH:resource/tests/testResources/scratch.txt"
// }->assertResult: {
//     "id": "open not exist file",
//     "contains": {
//         "openFile": {
//             "result": "file SUBLIMESOCKET_PATH:resource/tests/testResources/scratch.txt is opened.",
//             "name": "SUBLIMESOCKET_PATH:resource/tests/testResources/scratch.txt"
//         }
//     },
//     "description": "not contains."
// }



// ->適当な名前のファイルを開き、regionを追加する。追加後のidが入っていればOK/openFile: {
//     "name": "SUBLIMESOCKET_PATH:resource/tests/testResources/notexistfile.txt"
// }->appendRegion: {
//     "line": "1",
//     "message": "test",
//     "view": "notexistfile.txt",
//     "condition": "keyword"
// }->assertResult: {
//     "id": "contains region result",
//     "contains": {
//         "appendRegion": {
//             "result": "appended",
//             "condition": "keyword",
//             "line": "1",
//             "message": "test"
//         }
//     },
//     "description": "not match."
// }



// ->eraseのテスト。適当な名前のファイルを開き、regionを追加する。消した個数が合っていればOK/openFile: {
//     "name": "SUBLIMESOCKET_PATH:resource/tests/testResources/notexistfile.txt"
// }->appendRegion: {
//     "line": "1",
//     "message": "test",
//     "view": "notexistfile.txt",
//     "condition": "keyword"
// }->eraseAllRegion: {
    
// }->assertResult: {
//     "id": "eraseAllRegin, all regions are become empty",
//     "contains": {
//         "eraseAllRegion": {
//             "erasedIdentities": [
//                 "ss_(0, 0)"
//             ]
//         }
//     },
//     "description": "not all is empty."
// }



// ->バージョンの精査、apiVersionmajorが一致、minorが低いのでクライアントのUpdateを勧められる+突破/versionVerify: {
//     "socketVersion": 3,
//     "apiVersion": "1.-1.0"
// }->assertResult: {
//     "id": "situation-please update possible",
//     "contains": {
//         "versionVerify": {
//             "result": 2
//         }
//     },
//     "description": "not match."
// }


// ->バージョンの精査、apiVersion majorが一致、minorが一致、verifyの突破/versionVerify:
// {
//     "socketVersion": 3,
//     "apiVersion": "1.4.0"
// }->assertResult: {
//     "id": "situation-latest version",
//     "contains": {
//         "versionVerify": {
//             "result": 1
//         }
//     },
//     "description": "not match."
// }


// ->バージョンの精査、apiVersion majorが一致、minorが高いので、SSをupdateするアドレスを渡して切断される。/versionVerify:
// {
//     "socketVersion": 3,
//     "apiVersion": "1.100.0",
//     "dryrun": true
// }->assertResult: {
//     "id": "situation-should update ss",
//     "contains": {
//         "versionVerify": {
//             "result": -1
//         }
//     },
//     "description": "not match."
// }

// ->バージョンの精査、apiVersion majorが低いので、クライアント側へとupdateを求めるシグナル+切断/versionVerify:
// {
//     "socketVersion": 3,
//     "apiVersion": "0.0.0",
//     "dryrun": true
// }->assertResult: {
//     "id": "situation-should update client",
//     "contains": {
//         "versionVerify": {
//             "result": -2
//         }
//     },
//     "description": "not match."
// }

// ->バージョンの精査、apiVersion majorが高いので、SSをupdateするアドレスを渡して切断/versionVerify:{
//    "socketVersion": 3,
//     "apiVersion": "2.0.0",
//     "dryrun": true
// }->assertResult: {
//     "id": "situation-should update ss",
//     "contains": {
//         "versionVerify": {
//             "result": -1
//         }
//     },
//     "description": "not match."
// }


// ->ステータスバーにメッセージを表示、テスト付き/showStatusMessage: {
//     "message": "testMessage"
// }->assertResult: {
//     "id": "contains message",
//     "contains": {
//         "showStatusMessage": {
//             "message": "testMessage"
//         }
//     },
//     "description": "notmatch."
// }






// ->終了時のメッセージ/showStatusMessage: {
//     "message": "test over.\n\n"
// }
